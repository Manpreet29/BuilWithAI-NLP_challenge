# -*- coding: utf-8 -*-
"""news_topics_graphs.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1EXd88xU35IdMU5OjxAnIkmNPO_rO_8ls
"""

!pip install -U kaleido
import pandas as pd

df = pd.read_excel(r'/content/drive/My Drive/CNN_articles_tones.xlsx')
df.head()

df['published_date'] =pd.to_datetime(df.published_date)
df_joy = df.groupby('published_date').count().reset_index()
df_joy = df_joy[25:]

df_joy.head()

!pip install plotly==4.7.1
!wget https://github.com/plotly/orca/releases/download/v1.2.1/orca-1.2.1-x86_64.AppImage -O /usr/local/bin/orca
!chmod +x /usr/local/bin/orca
!apt-get install xvfb libgtk2.0-0 libgconf-2-4
import plotly.graph_objects as go

import os

if not os.path.exists("images"):
    os.mkdir("images")

import plotly.express as px
fig = px.line(df_joy,x='published_date',y='Joy',title='Joy')
fig.update_xaxes(rangeslider_visible=True)
# fig.write_html('joy_graph.html')
fig.write_image("images/joy_graph.png")
fig.show()

fig = px.line(df_joy,x='published_date',y='Fear',title='Fear')
fig.update_xaxes(rangeslider_visible=True)
# fig.write_html('fear_graph.html')
fig.write_image('fear_graph.png')
fig.show()

fig = px.line(df_joy,x='published_date',y='Analytical',title='Analytical')
fig.update_xaxes(rangeslider_visible=True)
fig.write_image('analytical_graph.png')
fig.show()

fig = px.line(df_joy,x='published_date',y='Sadness',title='Sadness')
fig.update_xaxes(rangeslider_visible=True)
fig.write_image('sadness_graph.png')
fig.show()

fig = px.line(df_joy,x='published_date',y='Confident',title='Confidence')
fig.update_xaxes(rangeslider_visible=True)
fig.write_image('confident_graph.png')
fig.show()

fig = px.line(df_joy,x='published_date',y='Anger',title='Angry')
fig.update_xaxes(rangeslider_visible=True)
fig.write_image('anger_graph.png')
fig.show()

fig = px.line(df_joy,x='published_date',y='Tentative',title='Hesitant')
fig.update_xaxes(rangeslider_visible=True)
fig.write_image('tentative_graph.png')
fig.show()



from wordcloud import WordCloud, STOPWORDS
import plotly.graph_objs as go

def plotly_wordcloud(text):
    wc = WordCloud(stopwords = set(STOPWORDS),
                   max_words = 200,
                   max_font_size = 20,
                   height=2000,
                   width=2000,
                   )
    wc.generate(text)
    
    word_list=[]
    freq_list=[]
    fontsize_list=[]
    position_list=[]
    orientation_list=[]
    color_list=[]

    for (word, freq), fontsize, position, orientation, color in wc.layout_:
        word_list.append(word)
        freq_list.append(freq)
        fontsize_list.append(fontsize)
        position_list.append(position)
        orientation_list.append(orientation)
        color_list.append(color)
        
    # get the positions
    x=[]
    y=[]
    for i in position_list:
        x.append(i[0])
        y.append(i[1])
            
    # get the relative occurence frequencies
    new_freq_list = []
    for i in freq_list:
        new_freq_list.append(i*100)
    new_freq_list
    
    trace = go.Scatter(x=x, 
                       y=y, 
                       textfont = dict(size=new_freq_list,
                                       color=color_list),
                       hoverinfo='text',
                       hovertext=['{0}{1}'.format(w, f) for w, f in zip(word_list, freq_list)],
                       mode='text',  
                       text=word_list
                      )
    
    layout = go.Layout({'xaxis': {'showgrid': False, 'showticklabels': False, 'zeroline': False},
                        'yaxis': {'showgrid': False, 'showticklabels': False, 'zeroline': False}})
    
    fig = go.Figure(data=[trace], layout=layout)
    
    return fig

df = pd.read_excel(r'/content/drive/My Drive/docs_per_topic_with_key_topic.xlsx')
df.head()

for keywords in df['Topic_Keywords']:
  # keywords = keywords.split(',')
  # result=''
  # for i in range(10):
  #   result = result + " " + (keywords[i] + " ")*(20-i)
  # print(result)
  fig = plotly_wordcloud(keywords)
  fig.show()
  # print(keywords)
  # fig.write_html(keywords[0]+'.html')

